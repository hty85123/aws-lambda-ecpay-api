import ecpay_payment from 'ecpay_aio_nodejs';
import mysql from 'mysql2/promise';

const MERCHANTID = "2000132"; // ECPAY official test MERCHANTID
const HASHKEY = "5294y06JbISpM5x9"; // ECPAY official test HASHKEY
const HASHIV = "v77hoKGq4kWxNNIS"; // ECPAY official test HASHIV
const HOST = "https://your-api-endpoint.com/Prod"; // Your AWS API endpoint

const options = {
  OperationMode: 'Test',
  MercProfile: {
    MerchantID: MERCHANTID,
    HashKey: HASHKEY,
    HashIV: HASHIV,
  },
  IgnorePayment: [
      //"ATM",
      //"CVS",
      //"BARCODE",
    ],
  IsProjectContractor: false,
};

const dbConfig = {
    host: process.env.RDS_HOSTNAME,
    user: process.env.RDS_USERNAME,
    password: process.env.RDS_PASSWORD,
    database: process.env.RDS_DATABASE,
};

export const handler = async (event) => {
  // The unique identifier used to store each transaction in the database
  const transaction_id = event.pathParameters.transactionId; 
  const user_id = event.pathParameters.userId;
  
  let connection;
  let amount;

  try {
    connection = await mysql.createConnection(dbConfig);

    const [transaction] = await connection.execute(
      'SELECT amount FROM Transactions WHERE transaction_id = ?',
      [transaction_id]
    );

    if (transaction.length === 0) {
      throw new Error('Transaction not found');
    }

    amount = transaction[0].amount;

    const now = new Date();
    const fourDigitNumber = String(now.getMinutes()).padStart(2, '0') + String(now.getSeconds()).padStart(2, '0');
    //Unique order number generated by appending a timestamp to the transaction_id. It allows linking back to the corresponding transaction.
    const MerchantTradeNo = transaction_id + fourDigitNumber;

    const MerchantTradeDate = new Date().toLocaleString('zh-TW', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false,
      timeZone: 'UTC',
    });

    let base_param = {
      MerchantTradeNo: MerchantTradeNo,
      MerchantTradeDate,
      Language: 'ENG',
      TotalAmount: `${amount}`,
      TradeDesc: 'test',
      ItemName: `Deposit ${amount} points`,
      ReturnURL: `${HOST}/users/${user_id}/transactions/${transaction_id}/return`,
      ClientBackURL: `${HOST}/users/${user_id}/transactions/${transaction_id}/clientReturn`,
    };

    const create = new ecpay_payment(options);
    const html = create.payment_client.aio_check_out_all(base_param);

    return {
      statusCode: 200,
      headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "POST",
          "Access-Control-Allow-Headers": "Content-Type",
          'Content-Type': 'text/html'
      },
      body: html,
    };

  } catch (error) {
    console.error('Error processing transaction:', error);

    return {
      statusCode: 500,
      headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "POST",
          "Access-Control-Allow-Headers": "Content-Type"
      },
      body: JSON.stringify({ error: 'Internal Server Error' }),
    };
  } finally {
    if (connection) await connection.end();
  }
};
